name: StockENT B2B Textile Marketplace - Auto Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: stockent_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci

    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci

    - name: Setup Environment Variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/stockent_test" >> backend/.env
        echo "REDIS_URL=redis://localhost:6379" >> backend/.env
        echo "NODE_ENV=test" >> backend/.env
        echo "JWT_SECRET=test-secret-key" >> backend/.env
        echo "REACT_APP_API_URL=http://localhost:5001" >> frontend/.env

    - name: Generate Prisma Client
      run: |
        cd backend
        npx prisma generate

    - name: Run Database Migrations
      run: |
        cd backend
        npx prisma migrate deploy

    - name: Run Backend Tests
      run: |
        cd backend
        npm test

    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build Frontend
      run: |
        cd frontend
        npm run build

    - name: Build Backend
      run: |
        cd backend
        npm run lint

    - name: Deploy to Staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: rsync, docker build, etc.

    - name: Deploy to Production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "🚀 Deploying to production environment..."
        # Add your production deployment commands here
        # Example: rsync, docker build, etc.

    - name: Notify Deployment Status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful"
        else
          echo "❌ Deployment failed"
        fi