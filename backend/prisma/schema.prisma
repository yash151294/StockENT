// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  passwordHash      String?
  googleId          String?  @unique
  role              UserRole @default(BUYER)
  companyName       String?
  contactPerson     String?
  phone             String?
  country           String?
  profileImageUrl   String?
  verificationStatus VerificationStatus @default(PENDING)
  isActive          Boolean  @default(true)
  isFirstLogin      Boolean  @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  companyProfile    CompanyProfile?
  products         Product[]
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  conversations    Conversation[] @relation("ConversationBuyer")
  sellerConversations Conversation[] @relation("ConversationSeller")
  bids             Bid[]
  sampleRequests   SampleRequest[] @relation("SampleRequestBuyer")
  sellerSampleRequests SampleRequest[] @relation("SampleRequestSeller")
  verificationTokens VerificationToken[]
  refreshTokens    RefreshToken[]
  watchlist        WatchlistItem[]
  notifications    Notification[]
  wonAuctions      Auction[] @relation("AuctionWinner")

  @@map("users")
}

model CompanyProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  businessLicense String?
  taxId           String?
  address         String?
  city            String?
  state           String?
  postalCode      String?
  website         String?
  description     String?
  certifications  String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("company_profiles")
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  type      TokenType
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  parentId    String?
  level       Int
  path        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id                String      @id @default(cuid())
  sellerId          String
  categoryId        String
  title             String
  description       String
  quantityAvailable Float
  unit              String
  minOrderQuantity  Float
  basePrice         Float
  currency          Currency    @default(USD)
  location          String
  city              String?
  state             String?
  country           String
  status            ProductStatus @default(ACTIVE)
  listingType       ListingType @default(FIXED_PRICE)
  expiresAt         DateTime?
  tags              String[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  seller         User              @relation(fields: [sellerId], references: [id])
  category       Category          @relation(fields: [categoryId], references: [id])
  images         ProductImage[]
  specifications ProductSpecification[]
  auction        Auction?
  conversations  Conversation[]
  watchlistItems WatchlistItem[]
  sampleRequests SampleRequest[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  imageUrl  String
  alt       String?
  isPrimary Boolean @default(false)
  orderIndex Int
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductSpecification {
  id        String @id @default(cuid())
  productId String
  specName  String
  specValue String
  unit      String?
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_specifications")
}

model Auction {
  id            String      @id @default(cuid())
  productId     String      @unique
  auctionType   AuctionType @default(ENGLISH)
  startingPrice Float
  reservePrice  Float?
  currentBid    Float?
  bidIncrement  Float
  startTime     DateTime
  endTime       DateTime
  status        AuctionStatus @default(SCHEDULED)
  winnerId      String?
  bidCount      Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  winner  User?   @relation("AuctionWinner", fields: [winnerId], references: [id])
  bids    Bid[]

  @@map("auctions")
}

model Bid {
  id          String   @id @default(cuid())
  auctionId   String
  bidderId    String
  amount      Float
  isAutomatic Boolean  @default(false)
  maxBid      Float?
  status      BidStatus @default(ACTIVE)
  createdAt   DateTime @default(now())

  // Relations
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User    @relation(fields: [bidderId], references: [id])

  @@map("bids")
}

model Conversation {
  id         String   @id @default(cuid())
  productId  String
  buyerId    String
  sellerId   String
  buyerAlias String
  sellerAlias String
  status     ConversationStatus @default(ACTIVE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])
  buyer   User    @relation("ConversationBuyer", fields: [buyerId], references: [id])
  seller  User    @relation("ConversationSeller", fields: [sellerId], references: [id])
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  receiverId     String
  content        String
  messageType    MessageType @default(TEXT)
  attachments    String[]
  readAt         DateTime?
  createdAt      DateTime    @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation("MessageSender", fields: [senderId], references: [id])
  receiver     User         @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@map("messages")
}

model SampleRequest {
  id              String   @id @default(cuid())
  productId       String
  buyerId         String
  sellerId        String
  quantityRequested Float
  shippingAddress Json
  status          SampleStatus @default(PENDING)
  sampleCost      Float?
  shippingCost    Float?
  trackingNumber  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])
  buyer   User    @relation("SampleRequestBuyer", fields: [buyerId], references: [id])
  seller  User    @relation("SampleRequestSeller", fields: [sellerId], references: [id])

  @@map("sample_requests")
}

model WatchlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("watchlist_items")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum Currency {
  USD
  INR
  CNY
  TRY
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  SOLD
  EXPIRED
}

enum ListingType {
  FIXED_PRICE
  AUCTION
  NEGOTIABLE
}

enum AuctionType {
  ENGLISH
  DUTCH
  SEALED_BID
}

enum AuctionStatus {
  SCHEDULED
  ACTIVE
  ENDED
  CANCELLED
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  CLOSED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum SampleStatus {
  PENDING
  APPROVED
  REJECTED
  SHIPPED
  DELIVERED
}

enum BidStatus {
  ACTIVE
  OUTBID
  WITHDRAWN
  WINNING
}

enum NotificationType {
  BID_PLACED
  BID_OUTBID
  AUCTION_ENDING
  MESSAGE_RECEIVED
  SAMPLE_APPROVED
  VERIFICATION_COMPLETE
  PRICE_ALERT
  SYSTEM
}
