---
description: Authentication and security implementation guidelines
---

# Authentication & Security Guidelines

## Authentication System
StockENT implements a comprehensive authentication system with multiple layers:

### JWT Authentication
- **Access Tokens**: Short-lived (15 minutes) for API requests
- **Refresh Tokens**: Long-lived (7 days) for token renewal
- **Token Storage**: HTTP-only cookies for security
- **Token Rotation**: Automatic refresh token rotation

### OAuth Integration
- **Google OAuth**: Social login with Passport.js
- **OAuth Callback**: Secure callback handling
- **Account Linking**: Link OAuth accounts to existing users

### Role-Based Access Control
- **ADMIN**: Full system access, user management, analytics
- **SELLER**: Product management, auction creation, messaging
- **BUYER**: Product browsing, bidding, messaging, sample requests

## Security Implementation

### Backend Security
- **Helmet**: Security headers (CSP, HSTS, etc.)
- **CORS**: Configured for frontend origin only
- **Rate Limiting**: API protection against abuse
- **Input Validation**: Joi schemas for all inputs
- **XSS Protection**: Input sanitization and output encoding
- **SQL Injection**: Prisma ORM prevents SQL injection
- **File Upload Security**: MIME type validation, file size limits

### Frontend Security
- **Protected Routes**: Role-based route protection
- **Token Management**: Secure token storage and refresh
- **Input Sanitization**: Client-side validation
- **XSS Prevention**: React's built-in XSS protection
- **CSRF Protection**: SameSite cookie attributes

## Authentication Flow
1. **Login**: Email/password or Google OAuth
2. **Token Generation**: JWT access + refresh tokens
3. **Token Storage**: HTTP-only cookies (secure)
4. **API Requests**: Automatic token attachment
5. **Token Refresh**: Automatic renewal before expiration
6. **Logout**: Token invalidation and cleanup

## Security Best Practices
- **Password Hashing**: bcrypt with salt rounds
- **Session Management**: Redis-based session storage
- **Rate Limiting**: Per-IP and per-user limits
- **Input Validation**: Server-side validation for all inputs
- **Error Handling**: Secure error messages (no sensitive data)
- **Logging**: Security event logging with Winston
- **Monitoring**: Failed login attempt tracking

## File Upload Security
- **File Type Validation**: Whitelist allowed MIME types
- **File Size Limits**: Configurable size restrictions
- **Virus Scanning**: Consider implementing virus scanning
- **Secure Storage**: Files stored outside web root
- **Access Control**: Authenticated access to uploaded files

## API Security
- **Authentication Required**: All protected endpoints require valid JWT
- **Role Verification**: Middleware checks user roles
- **Input Sanitization**: All inputs sanitized before processing
- **Rate Limiting**: Prevents API abuse
- **CORS Configuration**: Restricted to frontend origin
- **Error Handling**: Secure error responses