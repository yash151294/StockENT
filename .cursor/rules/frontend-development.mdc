---
globs: frontend/**/*.tsx,frontend/**/*.ts,frontend/**/*.js,frontend/**/*.json
---

# Frontend Development Guidelines

## Technology Stack
- **React 18** with TypeScript
- **Next.js 15** for routing and SSR
- **Material-UI (MUI)** for component library
- **Tailwind CSS** for utility-first styling
- **React Query** for server state management
- **Socket.io-client** for real-time features
- **React Router** for client-side routing
- **Formik + Yup** for form handling and validation

## Architecture Patterns
- **Context API** for global state (Auth, Socket, Language, Notifications)
- **Custom Hooks** for reusable logic
- **Component Composition** over inheritance
- **Service Layer** for API calls
- **TypeScript interfaces** for type safety

## Key Files
- **App Entry**: [frontend/src/App.tsx](mdc:frontend/src/App.tsx) - Main app with routing and providers
- **Auth Context**: [frontend/src/contexts/AuthContext.tsx](mdc:frontend/src/contexts/AuthContext.tsx) - Authentication state
- **Socket Context**: [frontend/src/contexts/SocketContext.tsx](mdc:frontend/src/contexts/SocketContext.tsx) - Real-time connections
- **API Service**: [frontend/src/services/api.ts](mdc:frontend/src/services/api.ts) - HTTP client configuration
- **Types**: [frontend/src/types/index.ts](mdc:frontend/src/types/index.ts) - TypeScript definitions

## Component Guidelines
- Use **functional components** with hooks
- Implement **proper TypeScript types** for all props
- Use **Material-UI components** as base, customize with Tailwind
- Follow **single responsibility principle** for components
- Implement **proper error boundaries** for error handling
- Use **React.memo** for performance optimization when needed

## State Management
- **Context API** for global state (auth, socket, language)
- **React Query** for server state and caching
- **Local state** with useState/useReducer for component state
- **Custom hooks** for shared logic

## Styling Guidelines
- Use **Material-UI theme** for consistent design system
- Apply **Tailwind CSS** for utility classes
- Follow **mobile-first** responsive design
- Use **CSS-in-JS** for component-specific styles
- Implement **dark mode** support where applicable

## Real-time Features
- Use **Socket.io-client** for live updates
- Implement **room-based subscriptions** for auctions
- Handle **typing indicators** in messaging
- Use **React Query** for optimistic updates

## Form Handling
- Use **Formik** for form state management
- Implement **Yup validation** schemas
- Handle **loading states** and error messages
- Use **React Hook Form** for complex forms
- Implement **file upload** with drag-and-drop

## Performance Optimization
- Use **React.lazy** for code splitting
- Implement **memoization** with React.memo and useMemo
- Use **React Query** for intelligent caching
- Optimize **bundle size** with dynamic imports
- Implement **virtual scrolling** for large lists