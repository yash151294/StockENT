---
description: Real-time features implementation with Socket.io
---

# Real-time Features Implementation

## Socket.io Architecture
StockENT uses Socket.io for real-time communication between frontend and backend:

### Backend Socket Setup
- **Server Configuration**: [backend/src/server.js](mdc:backend/src/server.js) - Socket.io server setup
- **CORS Configuration**: Configured for frontend origin
- **Room Management**: Auction and conversation rooms
- **Event Handling**: Bid updates, messaging, typing indicators

### Frontend Socket Integration
- **Socket Context**: [frontend/src/contexts/SocketContext.tsx](mdc:frontend/src/contexts/SocketContext.tsx) - Socket connection management
- **Event Listeners**: Real-time event handling
- **Connection Management**: Automatic reconnection and error handling

## Real-time Features

### Live Auctions
- **Auction Rooms**: Users join auction-specific rooms
- **Bid Updates**: Real-time bid notifications
- **Auction Status**: Live auction state changes
- **Winner Announcements**: Instant winner notifications
- **Countdown Timers**: Real-time auction end countdown

### Messaging System
- **Conversation Rooms**: Private messaging between users
- **Message Delivery**: Real-time message notifications
- **Typing Indicators**: Live typing status
- **Message Status**: Read receipts and delivery status
- **Online Status**: User online/offline indicators

### Notifications
- **System Notifications**: Real-time system alerts
- **Bid Alerts**: Outbid notifications
- **Message Alerts**: New message notifications
- **Auction Alerts**: Auction ending soon notifications

## Socket Events

### Auction Events
- `join-auction`: Join auction room for live updates
- `leave-auction`: Leave auction room
- `bid-placed`: New bid notification
- `auction-ended`: Auction completion notification
- `auction-update`: General auction status updates

### Messaging Events
- `join-conversation`: Join conversation room
- `leave-conversation`: Leave conversation room
- `typing-start`: User started typing
- `typing-stop`: User stopped typing
- `new-message`: New message notification

### Connection Events
- `connect`: Socket connection established
- `disconnect`: Socket connection lost
- `reconnect`: Socket reconnection
- `error`: Socket error handling

## Implementation Guidelines

### Backend Socket Handling
- Use **room-based messaging** for targeted updates
- Implement **event validation** for all socket events
- Handle **connection cleanup** on disconnect
- Use **Redis adapter** for multi-server scaling
- Implement **rate limiting** for socket events

### Frontend Socket Integration
- Use **Socket Context** for global socket management
- Implement **automatic reconnection** with exponential backoff
- Handle **connection states** (connecting, connected, disconnected)
- Use **event cleanup** to prevent memory leaks
- Implement **error handling** for socket failures

### Performance Considerations
- Use **room subscriptions** instead of global listeners
- Implement **event throttling** for high-frequency events
- Use **Redis** for scaling across multiple servers
- Monitor **connection counts** and performance
- Implement **connection pooling** for efficiency

## Error Handling
- **Connection Errors**: Automatic reconnection with backoff
- **Authentication Errors**: Token refresh and reconnection
- **Network Errors**: Graceful degradation to polling
- **Server Errors**: Error logging and user notification
- **Rate Limiting**: Respect server rate limits